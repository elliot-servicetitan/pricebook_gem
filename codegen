<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Service Code Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 md:p-8">
        <div class="bg-white rounded-xl shadow-lg p-6 md:p-8">
            <h1 class="text-3xl font-bold mb-2 text-gray-900">Interactive Service Code Generator</h1>
            <p class="text-gray-600 mb-6">Paste your list of service names below, one per line. The tool will generate a unique code for each item (2-8 characters).</p>

            <!-- Input Area -->
            <div class="mb-6">
                <label for="service-names" class="block text-sm font-medium text-gray-700 mb-2">Service Names:</label>
                <textarea id="service-names" rows="10" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" placeholder="Paste your service names here, one per line..."></textarea>
            </div>

            <!-- Action Buttons -->
            <div class="flex flex-wrap gap-4 mb-8">
                <button onclick="generateCodes()" class="bg-blue-600 text-white font-semibold py-2 px-5 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-transform transform hover:scale-105">
                    Generate Codes
                </button>
                <button onclick="downloadCSV()" id="download-btn" class="bg-green-600 text-white font-semibold py-2 px-5 rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-transform transform hover:scale-105" disabled>
                    Download as CSV
                </button>
                 <button onclick="clearAll()" class="bg-red-500 text-white font-semibold py-2 px-5 rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-400 transition-transform transform hover:scale-105">
                    Clear
                </button>
            </div>

            <!-- Results Table -->
            <div id="results-container" class="overflow-x-auto">
                 <h2 class="text-2xl font-bold mb-4 text-gray-900">Results</h2>
                 <p id="line-count" class="text-gray-600 mb-4"></p>
                 <table class="min-w-full bg-white border border-gray-200 rounded-lg">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="w-1/2 px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Service Name</th>
                            <th class="w-1/2 px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Generated Code</th>
                        </tr>
                    </thead>
                    <tbody id="results-table" class="divide-y divide-gray-200">
                        <!-- Rows will be inserted here by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        // Store generated data to be used for CSV export
        let tableData = [];

        function generateCodes() {
            const textInput = document.getElementById('service-names').value;
            const lines = textInput.split('\n').filter(line => line.trim() !== '');
            const tableBody = document.getElementById('results-table');
            const downloadBtn = document.getElementById('download-btn');
            const lineCountEl = document.getElementById('line-count');
            
            tableBody.innerHTML = ''; // Clear previous results
            tableData = [];
            const generatedCodes = new Map();

            if (lines.length === 0) {
                lineCountEl.textContent = 'No lines detected. Please paste your data.';
                downloadBtn.disabled = true;
                return;
            }

            lines.forEach(line => {
                const serviceName = line.trim();
                let code = createAcronym(serviceName);
                const originalCode = code;

                // --- CHANGE: Improved uniqueness check to respect 8-char limit ---
                let count = 1;
                while (generatedCodes.has(code)) {
                    count++;
                    // Dynamically make space for the counter to not exceed 8 chars
                    const availableLength = 8 - String(count).length;
                    code = originalCode.substring(0, availableLength) + count;
                }
                generatedCodes.set(code, serviceName);

                // Add to internal data store and table
                tableData.push({ service: serviceName, code: code });

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">${serviceName}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900">${code}</td>
                `;
                tableBody.appendChild(row);
            });
            
            lineCountEl.textContent = `Successfully processed ${lines.length} lines.`;
            downloadBtn.disabled = false;
        }

        function createAcronym(text) {
            // --- CHANGE: New logic to enforce 2-8 character length ---
            const cleanedText = text.trim().replace(/[^a-zA-Z0-9\s]/g, '');
            if (!cleanedText) return 'CODE';

            const words = cleanedText.split(/\s+/).filter(w => w);
            let acronym = '';

            // Generate base acronym from first letters or numbers
            words.forEach(word => {
                if (!isNaN(word)) {
                    acronym += word;
                } else {
                    acronym += word[0].toUpperCase();
                }
            });

            // If acronym is too short, try to build a 2-char code
            if (acronym.length < 2) {
                const cleanNoSpaces = cleanedText.replace(/\s/g, '');
                if (cleanNoSpaces.length >= 2) {
                    acronym = cleanNoSpaces.substring(0, 2).toUpperCase();
                } else {
                    // Pad with 'X' if a 2-char code cannot be made (e.g., input is "A")
                    acronym = (cleanNoSpaces.toUpperCase() + "XX").substring(0, 2);
                }
            }
            
            // Truncate if acronym is too long
            if (acronym.length > 8) {
                acronym = acronym.substring(0, 8);
            }
            
            return acronym;
        }
        
        function clearAll() {
            document.getElementById('service-names').value = '';
            document.getElementById('results-table').innerHTML = '';
            document.getElementById('line-count').textContent = '';
            document.getElementById('download-btn').disabled = true;
            tableData = [];
        }

        function downloadCSV() {
            if (tableData.length === 0) {
                // Using a more user-friendly modal/message box instead of alert()
                const lineCountEl = document.getElementById('line-count');
                lineCountEl.textContent = "Cannot download. Please generate codes first.";
                lineCountEl.classList.add('text-red-500');
                setTimeout(()=> {
                    lineCountEl.textContent = "";
                    lineCountEl.classList.remove('text-red-500');
                }, 3000);
                return;
            }

            let csvContent = "data:text/csv;charset=utf-8,";
            csvContent += "Service Name,Code\r\n"; // Add headers

            tableData.forEach(row => {
                let service = `"${row.service.replace(/"/g, '""')}"`; // Handle quotes
                let code = `"${row.code}"`;
                csvContent += [service, code].join(',') + "\r\n";
            });

            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "service_codes.csv");
            document.body.appendChild(link); // Required for Firefox
            link.click();
            document.body.removeChild(link);
        }
    </script>
</body>
</html>
